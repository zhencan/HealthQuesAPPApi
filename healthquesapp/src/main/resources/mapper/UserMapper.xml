<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.secondgroup.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.secondgroup.pojo.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="school_id" jdbcType="INTEGER" property="schoolId" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="image_url" jdbcType="VARCHAR" property="imageUrl" />
    <result column="at_create" jdbcType="INTEGER" property="atCreate" />
    <result column="at_update" jdbcType="INTEGER" property="atUpdate" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from phq_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.secondgroup.pojo.User">
    insert into phq_user (id, school_id, username, 
      password, phone, image_url, 
      at_create, at_update)
    values (#{id,jdbcType=INTEGER}, #{schoolId,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{imageUrl,jdbcType=VARCHAR}, 
      #{atCreate,jdbcType=INTEGER}, #{atUpdate,jdbcType=INTEGER})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.secondgroup.pojo.User">
    update phq_user
    set school_id = #{schoolId,jdbcType=INTEGER},
      username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      image_url = #{imageUrl,jdbcType=VARCHAR},
      at_create = #{atCreate,jdbcType=INTEGER},
      at_update = #{atUpdate,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select id, school_id, username, password, phone, image_url, at_create, at_update
    from phq_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, school_id, username, password, phone, image_url, at_create, at_update
    from phq_user
  </select>

  <select id="findByUsername" resultMap="BaseResultMap">
    select *
    from phq_user
    where username = #{username,jdbcType=VARCHAR}
  </select>

    <!--
        id : 为UserMapper里的方法名
        parameterType : 可不写。但为了便于以后观看，可写成"java.util.Map"或"map"
        resultType : 必写。
            resultType="User",即User对象类型，User为别名，
            我们这个xml上面有生成的已经把字段与属性对应好了的<resultMap id="BaseResultMap"，我们直接引用其id就行了。
          故将resultType="User"换成resultMap="BaseResultMap"
      #{} : {}里面写map里面我们定义的key，即Controller里的paramMap.put("username",
 -->
  <select id="queryUserLogin" parameterType="java.util.Map" resultMap="BaseResultMap">
  	select id, school_id, username, password, phone, image_url, at_create, at_update
    from phq_user where username=#{username} and password=#{password}
  </select>

  <update id="updateImageUrl" parameterType="com.secondgroup.pojo.User">
    update phq_user
    set image_url = #{imageUrl,jdbcType=VARCHAR},
      at_update = #{atUpdate,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="updatePassword" parameterType="com.secondgroup.pojo.User">
    update phq_user
    set password = #{password,jdbcType=VARCHAR},
      at_update = #{atUpdate,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="updateGeneralInfo" parameterType="com.secondgroup.pojo.User">
    update phq_user
    set username = #{username,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      at_update = #{atUpdate,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>